Prompt #1

URLs cannot have spaces. Instead, all spaces in a string are replaced with %20. Write an algorithm that replaces all spaces in a string with %20.

You may not use the replace() method or regular expressions to solve this problem. Solve the problem with and without recursion.
Example
Input: "Jasmine Ann Jones"
Output: "Jasmine%20Ann%20Jones"

Solution:
function makeUrl(userInput) {
    const userArray = userInput.split("");
    for (let i = 0; i < userArray.length; i++) {
      if (userArray[i] == " ") {
        userArray[i] = "%20";
      }
    };
    const solution = userArray.join('');
    return solution;
  }


Prompt #2
Write an algorithm that removes duplicates from an array. Do not use a function like filter() to solve this. Once you have solved the problem, demonstrate how it can be solved with filter(). Solve the problem with and without recursion.

Example
Input: [7, 9, "hi", 12, "hi", 7, 53]

Output: [7, 9, "hi", 12, 53]



function removeDoubles(userArray){
  let newArray = [];
  newArray.push(userArray[0]);
  for (let i = 0; i < userArray.length; i++) {
      for ( let j = 0 ; j < newArray.length; j++) {
        if (userArray[i] == newArray[j]) {
          break; 
       } else if (j == newArray.length -1) {
        newArray.push(userArray[i]);  
      }
     }
   }
   console.log(newArray); 
}

let uniqueChars = testArray.filter((c, index) => {
    return testArray.indexOf(c) === index;
});


Prompt #3
Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.

Example
Input: "aaabccdddda"

Output: "3ab2c4da"

Solution:

function condenseString(string){
  const userArray = string.split("");
  let uniqueChars = [];
  let counter = 1;
  for( let i = 1; i < userArray.length; i++  || i + 1 == userArray.length){
    if( userArray[i] != userArray[i-1] ) {
      uniqueChars.push(counter);
      uniqueChars.push(userArray[i-1]);
      counter = 0;
    }
		if( i + 1 == userArray.length ){
      uniqueChars.push(userArray[i]);
    }
    counter++;
  }
  return uniqueChars;
}


///prompt #4
Write an algorithm that determines whether all the elements in a string are unique. You may not convert the string into an array or use array methods to solve this problem. The algorithm should return a boolean.

Example
Input: "hello"

Output: false

Input: "copyright"

Output: true


solution:
function uniqueCharacters(str){
  for(let i = 0; i < str.length; i++) {
    for(let j = i + 1; j < str.length; j++) {
      if (str[i] == str[j]) {
        return false;
      }
    }
  }            
  return true;
}


///prompt #5
Write an algorithm that sorts an array without using the sort() method. There are many different sorting algorithms — take the time to read about the following:

Quick sort
Merge sort
Heap sort
Insertion sort
Bubble sort
Selection sort
You may implement any of the above algorithms (or your own) to solve the problem — as long as it doesn't use sort().

Example
Input: [9, 2, 7, 12]

Output: [2, 7, 9, 12]

solution:
function bubbleSort(array) {
  for (let i= 0; i < array.length - 1; i++) {
    for (let j=0; j < array.length - 1 - i; j++) {
       if (array[j] > array[j+1]) {
        const tenp = arr[j];
        acc[j] = arr[j+1];
        arr[j+1] = temp;
      }
    }
  }
  return array;
}

function bubbleSort(array) {
  for (let i= 0; i < array.length - 1; i++) {
    for (let j=0; j < array.length - 1 - i; j++) {
       if (array[j] > array[j+1]) {
       [array[j], array[j+1]] = [array[j+1], array[j]];
      }
    }
  }
  return array;
}

const input = [9, 2, 7, 12];